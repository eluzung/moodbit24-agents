import os
import re
import time
from dotenv import load_dotenv
from langchain_community.chat_models import ChatOpenAI
from langchain_community.utilities import SQLDatabase
from langchain_community.agent_toolkits import create_sql_agent
from langchain_community.callbacks import get_openai_callback


class LangchainAgent_postgresql:
    def __init__(self):
        load_dotenv()
        api_key = os.getenv("OPENAI_API_KEY")
        if not api_key:
            raise ValueError(
                "API_KEY is missing from the environment variables.")

        self.llm = ChatOpenAI(
            temperature=0.0, model="gpt-3.5-turbo", api_key=api_key
        )

    def sql_query(self, input: str):
        try:
            # Update the connection URI to use PostgreSQL
            db = SQLDatabase.from_uri("postgresql://localhost/moodbitdb")

            PREFIX = """
            You are an SQL agent. You are able to answer questions about the database. Here are examples of correct SQL queries that your \
            answer should follow, and if the user provides an incorrect SQL query, you will respond with the correct SQL query:
            
            'input': 'How many customers have made purchases in the last year?'
            'sql_query': 'SELECT COUNT(DISTINCT customer_id) AS total_customers FROM purchases WHERE purchase_date >= CURRENT_DATE - INTERVAL '1 year';'
            
            'input': 'What is the total revenue generated by each product category in 2023?'
            'sql_query': 'SELECT p.category, SUM(pr.total_amount) AS total_revenue FROM products p JOIN purchases pr ON p.product_id = pr.product_id WHERE EXTRACT(YEAR FROM pr.purchase_date) = 2023 GROUP BY p.category;'
            
            'input': 'SELECT * FROM products WHERE stock_quantity LIKE 'A%' AND name > 50;'
            'sql_query': 'SELECT * FROM products WHERE stock_quantity > 50 AND name LIKE 'A%';'
            
            'input': 'SELECT customer_id, AVG(total_amount) AS avg_purchase_amount FROM purchases WHERE EXTRACT(YEAR FROM purchase_date) = 2024;'
            'sql_query': 'SELECT customer_id, AVG(total_amount) AS avg_purchase_amount FROM purchases WHERE EXTRACT(YEAR FROM purchase_date) = 2024 GROUP BY customer_id;'
            """

            sql_agent = create_sql_agent(
                self.llm, db=db, agent_type="openai-tools",
                verbose=True, agent_executor_kwargs={"return_intermediate_steps": True},
            )

            start = time.time()
            process_start = time.process_time()

            with get_openai_callback() as cb:
                response = sql_agent.invoke(
                    {"input": input + "Must include the correct SQL query"})
                print(cb)

            end = time.time()
            process_end = time.process_time()
            print("SQL Query Run time:", end - start)
            print("SQL Query Process time:", process_end - process_start)

            sql_query_match = re.search(
                r'```sql\n(SELECT[\s\S]*?)\n```', response["output"])

            sql_query = sql_query_match.group(
                1).strip() if sql_query_match else None

            try:
                if len(response.get("intermediate_steps", [])) > 2 and len(response["intermediate_steps"][2]) > 0:
                    sql_query1 = response["intermediate_steps"][2][0].tool_input.get(
                        'query')
                else:
                    sql_query1 = sql_query
            except IndexError:
                sql_query1 = sql_query

            if sql_query1:
                sql_query1 = sql_query1.replace('\n', ' ').replace('\\', '')
            # print("sql_query1", sql_query1)
            responseObj = {
                "sql_query1": sql_query1,
                # "output": response["output"],
                # "sql_query": sql_query,
                # "filtered_output": filtered_output
            }

            print("sql_query: ", sql_query1)

            return responseObj
        except Exception as e:
            print("error", e)
            return str(e)


# Example usage
if __name__ == "__main__":
    agent = LangchainAgent_postgresql()
